version: '2.4'

services:

  app:
    build: .
    image: app
    container_name: app
    env_file:
      - app.env
    volumes:
      - .:/usr/src/app
    command: gunicorn -b :8000 app:app
    networks:
      app_net:
        ipv4_address: 172.16.238.2


  migration:
    image: app
    container_name: migration
    env_file:
      - app.env
    depends_on:
      - postgres
    entrypoint: ./wait-for-it.sh postgres:5432 -- python manage.py db upgrade
    restart: on-failure
    networks:
      app_net:
        ipv4_address: 172.16.238.3


  worker:
    image: app
    container_name: worker
    env_file:
      - app.env
    depends_on:
      - redis
    entrypoint: ./wait-for-it.sh redis:6379 -- python worker.py
    restart: on-failure
    networks:
      app_net:
        ipv4_address: 172.16.238.4


  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      app_net:
        ipv4_address: 172.16.238.5


  postgres:
    image: postgres:9.4-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: wordcount_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
    networks:
      app_net:
        ipv4_address: 172.16.238.6
       

  redis:
    image: redis:3.0.7-alpine
    container_name: redis
    command: redis-server --requirepass secretpassword
    networks:
      app_net:
        ipv4_address: 172.16.238.7


networks:
  app_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.1